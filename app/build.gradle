apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
fileTree('scripts').each { apply from: "${it}" }

def API = 25
def minAPI = 16
def appId = 'ru.softbalance.equipmentlibrary'
def appVersionCode = gitCommitCount()
def appVersionName = "1.0.0.$appVersionCode"

android {
    compileSdkVersion API

    buildToolsVersion '25.0.3'

    defaultConfig {
        applicationId appId
        minSdkVersion minAPI
        targetSdkVersion API
        versionCode appVersionCode
        versionName appVersionName
        vectorDrawables.useSupportLibrary true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            debuggable true
            minifyEnabled false
            testCoverageEnabled false
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        stage {
            minSdkVersion 21
            applicationId appId + ".stage"
        }
        production {
            minSdkVersion 16
            applicationId appId
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
        incremental false
    }

    dataBinding {
        enabled = true
    }

    applicationVariants.all { variant ->

        def filename = "equipment_test-${variant.baseName}-${versionName}.apk"

        variant.outputs.each { output ->
            output.outputFile = new File(output.outputFile.parent, filename)
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/rxjava.properties'
        return true
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
}

kapt {
    generateStubs = true
}

def supportVers = '25.3.1'
def mockitoVers = '2.4.2'

dependencies {

    compile project(':equipment')

    // Kotlin language
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    // Android support
    compile "com.android.support:appcompat-v7:$supportVers"
    compile "com.android.support:design:$supportVers"
    kapt "com.android.databinding:compiler:$androidPluginVersion"

    // UI
    compile 'com.android.support.constraint:constraint-layout:1.0.2'

    // Testing
    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:$mockitoVers"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    testCompile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    androidTestCompile "org.mockito:mockito-core:$mockitoVers"
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile "com.android.support:support-annotations:$supportVers"
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}